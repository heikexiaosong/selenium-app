<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration debug="true">

    <!--
        ConsoleAppender : 输出至控制台
        选项：
            Threshold=WARN:指定日志消息的输出最低层次。
            ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
            Target=System.err：默认情况下是：System.out,指定输出控制台。
    -->
    <!--
       如果使用PatternLayout布局就要指定的打印信息的具体格式ConversionPattern,打印参数如下：
                    %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
                    %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
                    %r: 输出自应用启动到输出该log信息耗费的毫秒数
                    %c: 输出日志信息所属的类目，通常就是所在类的全名
                    %t: 输出产生该日志事件的线程名
                    %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
                    %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
                    %%: 输出一个"%"字符
                    %F: 输出日志消息产生时所在的文件名称
                    %L: 输出代码中的行号
                    %m: 输出代码中指定的消息,产生的日志具体信息
                    %n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
                    可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
                    1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
                    2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
                    3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
                    4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。
     -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} [%p] %C.%M (%F:%L) - %m \n"/>
        </layout>
    </appender>

    <!--
        RollingFileAppender : 文件到达指定大小时产生一个新文件
        选项：
            Threshold=WARN:指定日志消息的输出最低层次。
            ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
            File=mylog.txt:指定消息输出到mylog.txt文件。
            Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
            MaxFileSize=100KB:后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
            MaxBackupIndex=2:指定可以产生的滚动文件的最大数。
    -->
    <appender name="file" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="logs/gavel-env.log"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p:%m %n==> %l%n%n"/>
        </layout>
    </appender>


    <!--
        additivity：它是 子Logger 是否继承 父Logger 的 输出源（appender） 的标志位。
        具体说，默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出。
        若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。
    -->
    <logger name="com.gavel" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="file"/>
        <appender-ref ref="console"/>
    </logger>

    <root>
        <!-- 优先级 -->
        <priority value="error"/>
        <appender-ref ref="file"/>
        <appender-ref ref="console"/>
    </root>

</log4j:configuration>